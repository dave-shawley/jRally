<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by TaglibToXSD. + Mark A. Ziesemer, http://www.ziesemer.com + 2008-03-25 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0" xml:lang="en" elementFormDefault="qualified" targetNamespace="http://java.sun.com/jsf/core">
  <xs:annotation>
    <xs:documentation>The core JavaServer Faces custom actions that are independent of any particular RenderKit.</xs:documentation>
    <xs:documentation>tlib-version: 1.2</xs:documentation>
  </xs:annotation>
  <xs:element name="actionListener">
    <xs:annotation>
      <xs:documentation><![CDATA[

        <p>Register an ActionListener instance on the
        UIComponent associated with the closest parent UIComponent
        custom action.</p>
     ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ActionListenerTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
            Fully qualified Java class name of an ActionListener to be
            created and registered.
         ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
        Value binding expression that evaluates to an object that 
        implements javax.faces.event.ActionListener.
      ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="attribute">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Add an attribute to the UIComponent associated with the closest
            parent UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.AttributeTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The name of the component attribute to be set.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The value of the component attribute to be set.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="convertDateTime">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register a DateTimeConverter instance on the UIComponent associated
            with the closest parent UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ConvertDateTimeTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="dateStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Predefined formatting style which determines how the date
                component of a date string is to be formatted and parsed.
                Applied only if type is "date" or "both".  Valid values
                are "default", "short", "medium", "long", and "full".
                Default value is "default".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="locale">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Locale whose predefined styles for dates and times are used
                during formatting or parsing.  If not specified, the Locale
                returned by FacesContext.getViewRoot().getLocale() will be used.
                Value must be either a VB expression that evaluates to a
                java.util.Locale instance, or a String that is valid to pass as
                the first argument to the constructor java.util.Locale(String
                language, String country).  The empty string is passed as the
                second argument.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="pattern">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Custom formatting pattern which determines how the
                date/time string should be formatted and parsed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="timeStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Predefined formatting style which determines how the
                time component of a date string is to be formatted and
                parsed.  Applied only if type is "time" or "both".
                Valid values are "default", "short", "medium", "long",
                and "full".  Default value is "default".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="timeZone">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Time zone in which to interpret any time information in the date
                String.  Value must be either a VB expression that evaluates to
                a java.util.TimeZone instance, or a String that is a timezone ID
                as described in the javadocs for
                java.util.TimeZone.getTimeZone().
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Specifies what contents the string value will be
                formatted to include, or parsed expecting.  Valid
                values are "date", "time", and "both".  Default
                value is "date".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                javax.faces.convert.DateTimeConverter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="convertNumber">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register a NumberConverter instance on the UIComponent associated
            with the closest parent UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ConvertNumberTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="currencyCode">
        <xs:annotation>
          <xs:documentation><![CDATA[
                ISO 4217 currency code, applied only when
                formatting currencies.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="currencySymbol">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Currency symbol, applied only when formatting
                currencies.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="groupingUsed">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag specifying whether formatted output will
                contain grouping separators.  Expressions must
                evaluate to a boolean.  Default value
                is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="integerOnly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag specifying whether only the integer part
                of the value will be formatted and parsed.
                Expressions must evaluate to a boolean.
                Default value is false.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="locale">
        <xs:annotation>
          <xs:documentation><![CDATA[<p>

                <span class="changed_modified_2_0">Locale</span> whose
                predefined styles for numbers are used during formatting
                and parsing.  If not specified, the Locale returned by
                FacesContext.getViewRoot().getLocale() will be used.
                Expressions must evaluate to a java.util.Locale <span
                class="changed_modified_2_0">or a String that is valid to
                pass as the first argument to the constructor
                java.util.Locale(String language, String country). The
                empty string is passed as the second argument.</span>

            </p>]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxFractionDigits">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Maximum number of digits that will be formatted
                in the fractional portion of the output.  Expressions
                must evaluate to an int.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxIntegerDigits">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Maximum number of digits that will be formatted
                in the integer portion of the output.  Expressions
                must evaluate to an int.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minFractionDigits">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Minimum number of digits that will be formatted
                in the fractional portion of the output.  Expressions
                must evaluate to an int.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minIntegerDigits">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Minimum number of digits that will be formatted
                in the integer portion of the output.  Expressions
                must evaluate to an int.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="pattern">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Custom formatting pattern which determins how the
                number string should be formatted and parsed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Specifies how the number string will be formatted
                and parsed.  Valid values are "number", "currency",
                and "percent".  Default value is "number".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                javax.faces.convert.NumberConverter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="converter">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register a named Converter instance on the UIComponent
            associated with the closest parent UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ConverterTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="converterId">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter identifier of the Converter instance to be
                created and registered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an object that
                implements javax.faces.convert.Converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="facet">
    <xs:annotation>
      <xs:documentation><![CDATA[

            <p><span class="changed_modified_2_0">Register</span> a
            named facet on the UIComponent associated with the closest
            parent UIComponent custom action.</p>

        ]]></xs:documentation>
      <xs:documentation>tag-class: javax.faces.webapp.FacetTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="name" use="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name of the facet to be created.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="loadBundle">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Load a resource bundle localized for the Locale of the current
            view, and expose it as a java.util.Map in the request attributes
            of the current request under the key specified by the value of the
            "var" attribute of this tag.  The Map must behave such that if a
            get() call is made for a key that does not exist in the Map, the
            literal string ???KEY??? is returned from the Map, where KEY is
            the key being looked up in the Map, instead of a
            MissingResourceException being thrown.  If the ResourceBundle does
            not exist, a JspException must be thrown.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.LoadBundleTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="basename">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Base name of the resource bundle
                to be loaded.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="var" use="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name of a request scope attribute under which
                the resource bundle will be exposed as a Map.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="param">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Add a child UIParameter component to the UIComponent
            associated with the closed parent UIComponent custom
            action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ParameterTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                ValueExpression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Component identifier of the UIParameter component
                to be created.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="name">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name of the parameter to be created.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Value of the parameter to be set.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="viewParam">
    <xs:annotation>
      <xs:documentation><![CDATA[

            <p class="changed_added_2_0">Used inside of the metada facet
            of a view, this tag causes a <a target="_"
            href="../../../javadocs/javax/faces/component/UIViewParameter.html">UIViewParameter</a>
            to be attached as metadata for the current view.  Because
            <code>UIViewParameter</code> extends <code>UIInput</code>
            all of the attributes and nested child content for any
            <code>UIInput</code> tags are valid on this tag as well.</p>

        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ParameterTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxlength">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The maximum number of characters that may
                be entered in this field.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="phaseListener">
    <xs:annotation>
      <xs:documentation><![CDATA[
      Register a PhaseListener instance on the UIViewRoot in which
      this tag is nested.
    ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.PhaseListenerTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
        Fully qualified Java class name of an PhaseListener to be
        created and registered.
      ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
        Value binding expression that evaluates to an object that 
        implements javax.faces.event.PhaseListener.
      ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectItem">
    <xs:annotation>
      <xs:documentation><![CDATA[
                

            <p><span class="changed_modified_2_0">Add</span> a child
            UISelectItem component to the UIComponent associated with
            the closed parent UIComponent custom action.</p>

                
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.SelectItemTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Value binding expression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Component identifier of the UISelectItem
                component to be created.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemDescription">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Description of this option, for use in
                development tools.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemDisabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether the option created
                by this component is disabled.  Expressions
                must evaluate to a boolean.  Default value
                is false.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemLabel">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Label to be displayed to the user
                for this option.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="escape">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that characters that are sensitive in
                the value of the <code>itemLabel</code>
                attribute must be escaped. This flag is set to "true" by
                default.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemValue">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Value to be returned to the server if this
                option is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Value binding expression pointing at a
                SelectItem instance containing the
                information for this option.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="noSelectionOption">
        <xs:annotation>
          <xs:documentation><![CDATA[
                

                <p class="changed_added_2_0">Flag indicating whether the
                option created by this component represents the special
                "no selection" option.  Expressions must evaluate to a
                boolean.  Default value is false.</p>

                
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectItems">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span class="changed_modified_2_0">Add</span> a
            child UISelectItems component to the UIComponent associated
            with the closed parent UIComponent custom action.</p>

            <p class="changed_modified_2_0">When iterating over the
            select items, <code>toString()</code> mest be called on the
            string rendered attribute values.</p>

<p class="changed_added_2_0">Version 2 of the specification introduces
several new attributes, described below.  These are: var, itemValue,
itemLabel, itemDescription, itemDisabled, and itemLabelEscaped.</p>

            

        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.SelectItemsTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Value binding expression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Component identifier of the UISelectItems
                component to be created.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                

                <p>Value expression pointing at <span
                class="changed_modified_2_0">any <code>Collection</code>
                or array.</span> The member elements may be instances of
                <code>SelectItem</code> <span
                class="changed_added_2_0">or any Java Object.  In the
                case where the member elements are plain Java Objects,
                several additional attributes must be used by the page
                author to correctly identify the data to the enclosing
                <code>UISelectOne</code> or <code>UISelectMany</code>
                component, as shown in the following example.</span>

<div class="syntax"><div class="html4strict" style="font-family: monospace;"><ol><li class="li1"><div class="de1"><span class="sc2">&lt;h:selectOneListbox <span class="kw3">size</span>=<span class="st0">&quot;1&quot;</span> <span class="kw3">id</span>=<span class="st0">&quot;escape02&quot;</span> <span class="kw3">value</span>=<span class="st0">&quot;#{select05NoSelection.initialCollectionValues}&quot;</span><span class="kw2">&gt;</span></span></div></li>
<li class="li2"><div class="de2">&nbsp; <span class="sc2">&lt;f:selectItems <span class="kw3">value</span>=<span class="st0">&quot;#{select05NoSelection.hobbitList}&quot;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var=<span class="st0">&quot;n&quot;</span></div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;itemValue=<span class="st0">&quot;#{n}&quot;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;itemLabel=<span class="st0">&quot;#{n.bio}&quot;</span></div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;itemDescription=<span class="st0">&quot;#{n.description}&quot;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;itemDisabled=<span class="st0">&quot;#{n.disabled}&quot;</span></div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;itemLabelEscaped=<span class="st0">&quot;true&quot;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;noSelectionValue=<span class="st0">&quot;#{select05NoSelection.hobbitList[0]}&quot;</span>/<span class="kw2">&gt;</span></span></div></li>
<li class="li2"><div class="de2"><span class="sc2"><span class="kw2">&lt;</span>/h:selectOneListbox&gt;</span> </div></li></ol></div></div>

<p class="changed_added_2_0">In the preceding example, the
<code>value</code> attribute on line 1 points to a
<code>Collection&lt;HobbitBean&gt;</code>.  <code>HobbitBean</code> is
just a regular Java Object (POJO) that conforms to JavaBeans naming
conventions for its properties.  The <code>value</code> attribute on
line 2 points to a <code>List&lt;HobbitBean&gt;</code>, though it could
just as well point to a <code>Collection</code>, array, or
<code>javax.faces.model.DataModel</code>.  The attributes on lines 3
through 9, inclusive, leverage the fact that the value is a collection
of POJOs.
</p>


</p>

                
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="var">
        <xs:annotation>
          <xs:documentation><![CDATA[
                

<p class="changed_added_2_0">Expose the value from the
<code>value</code> attribute under this request scoped key so that it
may be referred to in EL for the value of other attributes.</p>

                
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemValue">
        <xs:annotation>
          <xs:documentation><![CDATA[

 <p class="changed_added_2_0">evaluates to a
<code>Collection</code>, array, or <code>Map</code> from which the items
to be shown will be rendered.</p> 

            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemLabel">
        <xs:annotation>
          <xs:documentation><![CDATA[

 <p class="changed_added_2_0">evaluates to a String that will
serve as the label to be shown for the item.</p> 

            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemDescription">
        <xs:annotation>
          <xs:documentation><![CDATA[


 <p class="changed_added_2_0">evaluates to a String that will
serve as the description to be shown for the item.</p> 

            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemDisabled">
        <xs:annotation>
          <xs:documentation><![CDATA[

 <p class="changed_added_2_0">evaluates to a boolean that will
determine if the item value is selectable or not.</p> 

            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="itemLabelEscaped">
        <xs:annotation>
          <xs:documentation><![CDATA[

 <p class="changed_added_2_0">evaluates to a boolean that will
determine if the rendered markup for the item receives normal JSF HTML escaping or not.</p> 

 <p class="changed_added_2_0">Is either an EL expression
pointing to the element in the value collection whose value should be
marked as a &#8220;no selection&#8221; item, or a literal string that
exactly matches the value of the item in the collection that must be
marked as the &#8220;no selection&#8221; item.  If the user selects such
an item <strong>and</strong> the field is marked as required, then it
will not pass validation.</p> 

            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="setPropertyActionListener">
    <xs:annotation>
      <xs:documentation><![CDATA[
        <p>Register an ActionListener instance on the UIComponent
        associated with the closest parent UIComponent custom action.
        This actionListener will cause the value given by the "value"
        attribute to be set into the ValueExpression given by the "target"
        attribute.</p>

        <p>The implementation of this tag creates a special
        <code>ActionListener</code> instance and registers it on the
        <code>ActionSource</code> associated with our most immediate surrounding
        instance of a tag whose implementation class is a subclass of
        <code>UIComponentTag</code>.  This tag creates no output to the page
        currently being created.</p>

        <p>The <code>ActionListener</code> instance created and installed by
        this tag has the following behavior and contract.</p>

        <ul>

        <li>Only create and register the <code>ActionListener</code> instance
        the first time the component for this tag is created</li>

        <li>The "target" and "value" tag attributes are ValueExpression
        instances and are stored unevaluated as instance variables of the
        listener.</li>

        <li>When the listener executes, perform the following:
           <ul>
                Call getValue() on the "value" ValueExpression.
           </ul>
           <ul>
                 If value of the "value" expression is null, call setValue() on
                 the "target" ValueExpression with the null value.
           </ul>
           <ul>
                If the value of the "value" expression is not null, call getType()
                on the "value" and "target" ValueExpressions to determine their
                property types.
           </ul>
           <ul>
                Coerce the value of the "value" expression to the "target"
                expression value type following the Expression Language coercion
                rules.  Call setValue() on the "target" ValueExpression with the
                resulting value.
           </ul>
           <ul>
                If either coercion or the execution of setValue() fails throw an
                AbortProcessingException.
           </ul>
        </li>

        </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.SetPropertyActionListenerTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="value" use="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
              ValueExpression to be stored as the value of the target
              attribute.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="target" use="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
              ValueExpression that is the destination of the value
              attribute.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="subview">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Container action for all JavaServer Faces core and
            custom component actions used on a nested page via
            "jsp:include" or any custom action that dynamically
            includes another page from the same web application,
            such as JSTL's "c:import".
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.SubviewTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Value binding expression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" use="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Component identifier of the UINamingContainer
                component to be created.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether this component (and its
                children) should be rendered.  Expressions must
                evaluate to a boolean.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="validateDoubleRange">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register a DoubleRangeValidator instance on the
            UIComponent associated with the closest parent
            UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ValidateDoubleRangeTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="maximum">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Maximum value allowed for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minimum">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Minimum value allowed for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                DoubleRangeValidator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="validateLength">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register a LengthValidator instance on the
            UIComponent associated with the closest parent
            UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ValidateLengthTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="maximum">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Maximum length allowed for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minimum">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Minimum length allowed for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                LenghtValidator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="validateLongRange">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register a LongRangeValidator instance on the
            UIComponent associated with the closest parent
            UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ValidateLongRangeTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="maximum">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Maximum value allowed for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minimum">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Minimum value allowed for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                LongRangeValidator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="validateRegex">
    <xs:annotation>
      <xs:documentation><![CDATA[<p>

                <span class="changed_added_2_0">
            A validator that uses the pattern attribute to validate the
            wrapping component.  The entire pattern is matched against
            the String value of the component.  If it matches, it's
            valid.

         </p>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.RegexValidatorTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="pattern" use="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A regular expression pattern.  Remember that, like in
                all Java strings, backslash must be escaped with another
                backslash.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                RegexpValidator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="validator">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register a named Validator instance on the
            UIComponent associated with the closest parent
            UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ValidatorTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="validatorId">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Validator identifier of the Validator
                to be created and registered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression that evaluates to an object that implements
                the javax.faces.validator.Validator interface.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="valueChangeListener">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Register an ValueChangeListener instance on the UIComponent associated
            with the closest parent UIComponent custom action.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ValueChangeListenerTag</xs:documentation>
      <xs:documentation>body-content: empty</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Fully qualified Java class name of a
                ValueChangeListener to be created and registered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
           Value binding expression that evaluates to an object that 
           implements javax.faces.event.ValueChangeListener.
         ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="verbatim">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Create and register a child UIOutput component
            associated with the closest parent UIComponent
            custom action, which renders nested body content.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.VerbatimTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="escape">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that generated markup must
                be escaped in a manner that is appropriate
                for the markup language to be rendered.
                Expressions must evaluate to a boolean.
                Default value is false.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="view">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Container for all JavaServer Faces core and custom
            component actions used on a page.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.jsf_core.ViewTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="locale">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Locale to use for localizing this page.  Expressions
                must evaluate to a java.util.Locale or to a String
                that is converted to a Locale.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="renderKitId">
        <xs:annotation>
          <xs:documentation><![CDATA[
        Identifier for the RenderKit to use for
        rendering this page.
      ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="beforePhase">
        <xs:annotation>
          <xs:documentation><![CDATA[

          MethodBinding pointing to a method that takes a
          javax.faces.event.PhaseEvent and returns void.  This method
          will be called before every phase except for restore view.
      ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="afterPhase">
        <xs:annotation>
          <xs:documentation><![CDATA[

          MethodBinding pointing to a method that takes a
          javax.faces.event.PhaseEvent and returns void.  This method
          will be called after every phase except for restore view.
      ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
